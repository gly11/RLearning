---
title: "L2 数据可视化2"
author: "Wangcheng Li"
date: "`r Sys.Date()`"
output:
  prettydoc::html_pretty:
    theme: cayman
    highlight: github
    toc: true
    number_sections: true
vignette: >
  %\VignetteIndexEntry{Vignette Title}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---


```{r setup, include=FALSE}
library(formatR)
library(extrafont)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE,fig.height = 5,fig.width = 7)

# par(pin)
# fonts()
# font_import(prompt = F)
```


# 数据可视化>>基于ggplot2绘图

## 前言

### 为什么是ggplot2

> Hadley Wickem的`ggplot2`包是R的一个作图用的扩展包， 它实现了“图形的语法”， 将一个作图任务分解为若干个子任务， 只要完成各个子任务就可以完成作图。 在作常用的图形时， 只需要两个步骤： 首先将图形所展现的数据输入到 `ggplot()` 函数中， 然后调用某个`geom_xxx()`函数， 指定图形类型，如散点图、曲线图、盒形图等。

> 如果需要进一步控制图形细节， 只要继续调用其它函数， 就可以控制变量值的表现方式(scale)、图例、配色等。 这使得我们很容易做出基本的图形， 在有需要时再深入学习， 做出更为满意的图形。

> 与基本R中的作图系统相比， `ggplot2`的作图有规律可循， 作图结果直接达到出版印刷质量， 除了可以按照一些既定模式做出常见种类的图形， 也很容易将不同图形种类组合在一起， 或者设计新颖的图形。 基本R的作图结果通常不够美观， 如果要将不同种类图形组合在一起比较困难， 对设计新的图形类型支持也不够好。

### ggplot2的安装

`ggplot2` 的安装和大多数的R包安装时一样的： `install.packages("ggplot2")`，或者直接使用Rstudio自带的包管理工具： `Tools` >> `Install packages`。

### 关于R包开发

绘图是非常重要的一个能力，尤其是绘制某些比较特殊的图像。
在使用R的过程中，如果遇到了某些难以绘制但又比较有价值的图像，在解决该问题后，不妨把代码保存下来，或者直接做成R包。
我之前也写了一个如何开发R包的教程，可以参见
[郭老师的公众号](https://mp.weixin.qq.com/s/EOynM_XvW13k8nEkn068Vg)
或者[我的GitHub仓库](https://github.com/wangchengLi6/simpleRpackage)

这里我举一个我之前碰到的例子：当时我需要绘制一个坐标轴截断的图像，而网络上直接搜索的方法都不好用。
此时我在一篇帖子里找到了一个R包可以非常好地解决我的问题。

<center><img src="./picture/L2-p1.jpg" alt = "xxx" style="zoom:50%;"></center>

唯一的问题是，这个R包在安装后第一句话就是，如果你需要在论文中添加使用本R包绘制的图像，请引用我们的文章。
我去搜了一下才发现，作为一篇21年发表的文章，引用数当时（2023年4月）已经有了56，我昨天（9月1号）再搜了一下，已经达到了82。

<center><img src="./picture/L2-p3.png" alt = "xxx" style="zoom:90%;"></center>

出于某些原因，我最后是自己手动把图给画出来了，这是我最后绘制的图像。

<center><img src="./picture/L2-p2.jpg" alt = "xxx" style="zoom:90%;"></center>

当然，下一次再碰到类似的情况，我可能就考虑直接使用并引用了。

## ggplot2 绘图入门

### 绘图的基本逻辑

ggplot2 的绘图逻辑：

1. 准备数据，一般为数据框， 且一般为长表， 即每个观测时间占一行， 每个观测变量占一列。

2. 将数据输入到ggplot()函数中， 并指定参与作图的每个变量分别映射到哪些图形特性， 比如映射为x坐标、y坐标、颜色、形状等。 这些映射称为aesthetic mappings或aesthetics。

3. 选择一个合适的图形类型， 函数名以geom_开头， 如geom_point()表示散点图。 图形类型简称为geom。 将ggplot()部分与geom_xxx()部分用加号连接。 到此已经可以作图，下面的步骤是进一步的细化设定。

4. 设定适当的坐标系统， 如coord_cartesian(), scale_x_log10()等。 仍用加号连接。

5. 设定标题和图例位置等，如labs()。 仍用加号连接。

那么一般来说，`ggplot2`的绘图代码有如下格式：

```{}
p <- ggplot(data=<输入数据框>,
  mapping=aes(<维度>=<变量名>,
    <维度>=<变量名>, <...>))
p + geom_<图形类型>(<...>) + 
  scale_<映射>_<类型>(<...>) +
  coord_<类型>(<...>) +
  labs(<...>)
```

#### 补充：关于长宽表转换

```{r}
library(reshape2)
tep.air = airquality[1:10,]
head(tep.air)
```

```{r}
melt.air = melt(tep.air,id = c("Month","Day"))
head(melt.air)
# View(melt.air)
```

```{r}
dcast.melt.air = dcast(melt.air,Month+Day~variable,value.var = "value")
# 默认最后一列是值向量 或者通过value.var参数指定
head(dcast.melt.air)
```

### 散点图的绘制

#### 基本图像

以 `mtcars` 数据集作为输入数据， 做出简单的散点图，并逐步进行改善。 这个数据集在第一节有所介绍，我们首先绘制汽车重量(wt)和汽车油耗(每加仑汽油所能行驶的距离，mpg)的散点图。散点图最重要的映射是x轴与y轴两个维度，也就是什么数据作为横坐标，什么数据作为纵坐标。

```{r}
p <- ggplot(
  data = mtcars,
  mapping = aes(
    x = wt,
    y = mpg))
```

x、y轴是最常见的映射， 也可以将变量映射为颜色、符号、线型等， 这时不需要指定具体的颜色、符号、线型， 而是将变量映射为这些图形元素类型。

在如上指定了数据和映射后， 只要用 `geom_xxx()` 指定一个图形类型， 并与 `ggplot()` 的结果用加号连接就可以作图了，如：

```{r}
p + geom_point()
```

实际上，上面的程序等同于调用 `print(p + geom_point())`。 在R函数中或者在循环中需要显式地调用print()， 否则不会显示结果。显式地调用print()， 将上一程序写成：

```{r}
p1 <- p + geom_point()
print(p1) # plot(p1)
```

#### 逐步修正

指定数据集、指定映射、选择适当的图形类型就可以做出基本的图形， 随后可以逐步对坐标系、坐标系刻度、标签与图例、配色等进行改善。 实际上，ggplot2包已经提供了十分合理的预设值， 用户只要进行一些必要的改动即可。

作图步骤之间用加号连接，这是ggplot包特有的语法。 例如， 用相同的映射做出拟合曲线图：

```{r}
p + geom_smooth()
```

用相同的映射做出散点图并叠加拟合曲线图：

```{r}
p + geom_point() + geom_smooth()
```

`geom_smooth()` 的默认设置调用了`gam()`函数来拟合曲线， 可以用`geom_smooth()`的参数选择不同的拟合方法， 如直线拟合：

```{r}
p + geom_point() + geom_smooth(method="lm")
```

#### 颜色、符号、线型等映射

在`ggplot()`函数的`mapping`参数的`aes()`设定中将变量映射到x、y轴， 颜色、符号、线型等图形元素类型， 也可以作为图形设置将某些图形元素设置为固定值。

例如， 用不同颜色表示不同车型， 就是将 am 变量映射到color:

```{r}
p <- ggplot(mtcars, aes(
    x = wt,
    y = mpg,
    color = am))
```

再绘图：

```{r}
p + geom_point()
```

这里需要注意，由于给定的指标 `am` 目前是连续型数据，因此 `ggplot` 也将其视作连续型数据来进行映射。如果要将其视作因子型数据，可以修改代码如下。

```{r}
p <- ggplot(mtcars, aes(
    x = wt,
    y = mpg,
    color = factor(am)))
p + geom_point()
```

可以看到， `ggplot2` 自动绘制了相应的图例。此外，程序中仅指定了将变量 `am` 映射到颜色维 `color`， 并不具体指定所用的颜色。类似的映射也可以将指标 `hp` 映射到点的大小。

```{r}
p + geom_point(aes(size = hp))+theme(legend.position = "none")
```

进一步，还可以对每一个类别作曲线拟合的散点图：

```{r}
p + geom_point() + geom_smooth(method = "lm",)
```

可以看出， 不同散点用了不同颜色表示其 `am` 变量的值， 两个类型的车辆分别进行了曲线拟合， 曲线使用了不同颜色但置信域颜色相同，同时在图形右侧自动生成了颜色与continent变量值的对应关系图例。由于置信域颜色相同，在图中难以认读，为此可以使用 `fill` 维度映射来改变填充颜色。

```{r}
p + geom_point() + geom_smooth(method = "lm",aes(fill = factor(am)))
```

尝试将颜色指定为一个固定值，如：
```{r}
p+geom_point(aes(color = "chartreuse4"))
```

我们发现， 散点并没有使用草绿色， 而且图形右侧有一个chartreuse4图例。 这是因为， `aes()`仅用来指定变量与图形元素类型的映射， 所以实际上是生成了一个仅有一个常数值"chartreuse4"的新变量， 用颜色表示这个新变量。 为了指定固定颜色， 应将color=作为geom_xxx()函数的选项， 而不是放在`aes()`映射中， 如：

```{r}
p+geom_point(color = "chartreuse4")
```

*更多参数*：`geom_xxx()` 函数接受许多关于颜色、透明度、符号、线型的设置参数。 比如， 下面的程序指定了散点的透明度， 以及拟合直线的粗细：

```{r}
par(mfrow = c(2,1))
p + geom_point(alpha=0.5) +
  geom_smooth(method="lm", color="cadetblue1", se = FALSE, size = 4, alpha = 0.3)+
  theme(legend.position = "top")
p + geom_point(alpha=0.5) +
  geom_smooth(aes(group =am),method="lm", color="cadetblue1", se = FALSE, size = 4, alpha = 0.3)+
  theme(legend.position = "top")
par(mfrow = c(1,1))
```

程序中`size`指定了线的以毫米为单位的粗细， `se = FALSE`关闭了置信区间显示。 用`alpha =`设置了透明度， 取0和1之间的值， 数值越小越透明。 在有许多个点时适当设置透明度可以比较好地显示出重叠的点， 重叠点越多点的颜色越深。 虽然这里设置了固定的透明度， 也可以在`aes()`中将透明度`alpha`映射到某个变量， 使得该变量值大小用点的透明度表示。

画线时可以用`linetype`参数指定线型， 0表示实线， 1到6分别表示不同的虚线线型。

下面用labs()函数给图形加上适当的标题：

```{r}
p + geom_point(alpha = 0.3) +
  geom_smooth(method="lm",linetype = 2) + 
  labs(
    x = "wt",
    y = "mpg",
    title = "车辆重量和油耗",
    subtitle = "油耗数值代表每加仑油可以行驶的里程",
    caption = "数据来源: mtcars"  )
```


## ggplot2 与多元统计分析


## 绘图的一般性原则 (what is a good plot?)
